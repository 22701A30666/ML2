import random
import math
import matplotlib.pyplot as plt

def euclidean_distance(p1, p2):
    return math.sqrt(sum((a - b) ** 2 for a, b in zip(p1, p2)))

def assign_clusters(data, centroids):
    clusters = [[] for _ in centroids]
    for point in data:
        distances = [euclidean_distance(point, centroid) for centroid in centroids]
        closest_index = distances.index(min(distances))
        clusters[closest_index].append(point)
    return clusters

def calculate_centroids(clusters):
    centroids = []
    for cluster in clusters:
        if cluster:
            centroid = [sum(dim) / len(cluster) for dim in zip(*cluster)]
            centroids.append(centroid)
    return centroids

def has_converged(old_centroids, new_centroids, tol=1e-4):
    for oc, nc in zip(old_centroids, new_centroids):
        if euclidean_distance(oc, nc) > tol:
            return False
    return True

def kmeans(data, k, max_iterations=100):
    centroids = random.sample(data, k)
    for _ in range(max_iterations):
        clusters = assign_clusters(data, centroids)
        new_centroids = calculate_centroids(clusters)
        if has_converged(centroids, new_centroids):
            break
        centroids = new_centroids
    return centroids, clusters

def plot_clusters(clusters, centroids):
    colors = ['r', 'g', 'b', 'y', 'c', 'm']  # Up to 6 clusters
    for i, cluster in enumerate(clusters):
        xs = [point[0] for point in cluster]
        ys = [point[1] for point in cluster]
        plt.scatter(xs, ys, c=colors[i % len(colors)], label=f'Cluster {i+1}')
    
    # Plot centroids
    cx = [c[0] for c in centroids]
    cy = [c[1] for c in centroids]
    plt.scatter(cx, cy, c='black', marker='X', s=100, label='Centroids')

    plt.title("K-Means Clustering Result")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.legend()
    plt.grid(True)
    plt.show()

def main():
    data = [
        [1.0, 2.0], [1.5, 1.8], [5.0, 8.0],
        [8.0, 8.0], [1.0, 0.6], [9.0, 11.0],
        [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]
    ]
    k = 3
    centroids, clusters = kmeans(data, k)
    plot_clusters(clusters, centroids)

if __name__ == "__main__":
    main()
